

import { Component } from '@angular/core';
import { UserService } from './user.service';
import { Observable, Subject } from 'rxjs';
import { debounceTime, distinctUntilChanged, map, switchMap } from 'rxjs/operators';

@Component({
  selector: 'app-user-selector',
  templateUrl: './user-selector.component.html'
})
export class UserSelectorComponent {
  users$: Observable<any[]>;
  private searchTerms = new Subject<string>();

  constructor(private userService: UserService) {
    this.users$ = this.searchTerms.pipe(
      debounceTime(300),
      distinctUntilChanged(),
      switchMap(term => this.userService.getUsers().pipe(
        map(users => users.filter(user => user.name.toLowerCase().includes(term.toLowerCase())))
      ))
    );
  }

  searchUsers = (text$: Observable<string>) =>
    text$.pipe(
      debounceTime(300),
      distinctUntilChanged(),
            switchMap(term =>
        this.users$.pipe(
          map(users => users.map(user => `${user.name} - ${user.email}`))
        )
      )
    );
 selectedUsers: any[] = [];
  onUserSelected(user: any) {
   this.selectedUsers.push(user);
  }
  


}
